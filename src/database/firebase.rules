{
  "rules": {
    ".read": "auth != null",
    ".write": "auth != null",
    "summary": {
      // Make sure that summary always has count, weight and cost
      ".validate": "newData.hasChildren(['count', 'weight', 'cost'])",
      "count": {
        // Count can't be zero or less
        ".validate": "newData.isNumber() && newData.val() > 0"
      },
      "weight": {
        // Weight can't be zero or less
        ".validate": "newData.isNumber() && newData.val() > 0"
      },
      "cost": {
        // Cost can't be zero or less
        ".validate": "newData.isNumber() && newData.val() > 0"
      }
    },
    "data": {
      "$node_id": {
        // Making sure data has all necessary data
        ".validate": "newData.hasChildren(['grade', 'shape', 'dia', 'loc', 'count', 'length', 'origin', 'color'])",
        "grade": {
          // Grade must be in valid grades
          ".validate": "root.child('valid/grades/' + newData.val()).exists()"
        },
        "shape": {
          // Shape must be in valid shapes
          ".validate": "root.child('valid/shapes/' + newData.val()).exists()"
        },
        "dia": {
          // Dia must be a number greater than zero
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        "loc": {
          // Location must be valid
          ".validate": "root.child('valid/locs/' + newData.val()).exists()"
        },
        "cost": {
          // If cost exists, cost must be positive
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        "count": {
          // Count is always positive
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        "length": {
          // Length must either be -1 for full or positive for cut piece
          ".validate": "newData.isNumber() && (newData.val() > 0 || newData.val() == -1)"
        },
        "origin": {
          // Origin must be valid
          ".validate": "root.child('valid/origins/' + newData.val()).exists()"
        },
        "color": {
          // Color must be valid
          ".validate": "root.child('valid/colors/' + newData.val()).exists()"
        }
      }
    }
  }
}
